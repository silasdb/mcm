#
# First we test if dummy_module_2 is correctly declared, even if
# it is not used in the first handler. Old versions of mcm had a bug
# that prevent user from using a module if it was first used in a
# handler that was not triggered. So we test this case.
#

name dummy_module \
notify myhandler \
task dummy_module -test_ret 0

# This handler is never triggered.
handler myhandler \
task dummy_module_2 -test_ret 0

# Can we use dummy_module_2?
name 'can we use dummy_module_2?' \
task dummy_module_2 -test_ret 1

#
# Handlers can be called hierarchically
#

name dummy_module \
notify parent \
task dummy_module -test_ret 1

# Parent emits notify A
handler parent \
notify A \
name parent \
task dummy_module -test_ret 1

# Since our parent ran with nok status, all tasks with handler A should be called

handler A \
notify B \
name A \
task dummy_module -test_ret 1

handler A \
notify C \
name B \
task dummy_module -test_ret 0

# handler C exists, but does not run, because the task that emitted
# C returned 'ok'.
handler C \
name C \
task dummy_module -test_ret 0

notify this_notify_doesnt_exist \
name test_with_notify_that_doesnt_exist \
task dummy_module -test_ret 0

# This is just a notify that no body emits, so ignore it.
handler invalid_handler \
name invalid_handler \
task dummy_module -test_ret 1
