# A tree of handlers


# Handlers at the end are called the order they are declared. So, if there is a
# handler that refer others (with .notify), it should be declared first.

# This works as expected because the parent handler is declared first.
handler parent1 task dummy_module -test_ret 1 .notify 'first1 second1' .msg parent1
handler first1 task dummy_module -test_ret 1 .msg first1
handler second1 task dummy_module -test_ret 1 .msg second1
task dummy_module -test_ret 1 .notify parent1
task dummy_module -test_ret 0 .notify first1
task dummy_module -test_ret 0 .notify second1

# This executes first2 and second2 before parent2, so result is different and
# probably not what you want.
handler first2 task dummy_module -test_ret 1 .msg first2
handler second2 task dummy_module -test_ret 1 .msg second2
handler parent2 task dummy_module -test_ret 1 .notify 'first2 second2' .msg parent2
task dummy_module -test_ret 1 .notify parent2
task dummy_module -test_ret 0 .notify first2
task dummy_module -test_ret 0 .notify second2
